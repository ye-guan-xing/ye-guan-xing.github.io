[{"content":"全域生活服务平台 - 从零开始完整开发指南 🎯 项目概述 我们将构建一个完整的全域生活服务平台，包含：\nWeb管理后台：管理员管理商家、服务、订单 微信小程序：用户浏览服务、下单 后端API：Node.js + Express + MySQL 数据库：MySQL，使用DataGrip管理 🛠️ 阶段一：项目准备与环境搭建 第1步：安装必要软件 1.1 安装 Node.js（后端运行环境） 访问：https://nodejs.org 下载 LTS版本（长期支持版） 双击安装，全部点\u0026quot;下一步\u0026quot; 验证安装：按 Win + R，输入 cmd 回车，输入： 1 node -v 显示版本号如 v18.x.x 即成功！\n1.2 安装 Vue CLI（网页管理后台工具） 在cmd中继续输入：\n1 npm install -g @vue/cli 等待安装完成（可能需要几分钟）\n1.3 安装微信开发者工具（小程序开发） 访问：https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html 下载\u0026quot;稳定版\u0026quot;，安装后用微信扫码登录 1.4 安装 MySQL（数据库） 访问：https://dev.mysql.com/downloads/mysql/ 下载 MySQL Community Server 安装时记住设置的root密码（建议设为 123456） 1.5 安装 DataGrip（数据库可视化工具） 访问：https://www.jetbrains.com/datagrip/ 下载安装，学生可免费使用（用教育邮箱注册） 或使用30天免费试用 第2步：创建项目文件夹结构 在D盘创建项目文件夹：\n1 2 3 4 D:/life-service/ ├── server/ （后端API） ├── web-admin/ （网页管理后台） └── mini-user/ （微信小程序） 第3步：配置 DataGrip 连接数据库 3.1 连接 MySQL 打开 DataGrip，点击 \u0026ldquo;New Project\u0026rdquo; 项目名称：life_service_platform 在右侧 \u0026ldquo;Database\u0026rdquo; 面板，点击 \u0026quot;+\u0026quot; → \u0026ldquo;Data Source\u0026rdquo; → \u0026ldquo;MySQL\u0026rdquo; 填写连接信息： 1 2 3 4 Host: localhost Port: 3306 User: root Password: 123456 （你设置的MySQL密码） 点击 \u0026ldquo;Test Connection\u0026rdquo;，看到 ✅ Success 表示成功 点击 \u0026ldquo;OK\u0026rdquo; 3.2 创建数据库 在 DataGrip 中执行 SQL 创建数据库：\n按 Ctrl+Enter 打开新查询窗口 输入并执行： 1 2 3 CREATE DATABASE IF NOT EXISTS life_service DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci; 3.3 创建数据表 在 DataGrip 中执行以下 SQL 创建表：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 -- 1. 商家表 CREATE TABLE merchants ( id INT PRIMARY KEY AUTO_INCREMENT COMMENT \u0026#39;商家ID\u0026#39;, name VARCHAR(100) NOT NULL COMMENT \u0026#39;商家名称\u0026#39;, address VARCHAR(200) NOT NULL COMMENT \u0026#39;地址\u0026#39;, phone VARCHAR(20) NOT NULL COMMENT \u0026#39;联系方式\u0026#39;, status TINYINT NOT NULL DEFAULT 0 COMMENT \u0026#39;状态：0-审核中，1-已通过\u0026#39;, create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT \u0026#39;创建时间\u0026#39; ) COMMENT \u0026#39;商家表\u0026#39;; -- 2. 服务表 CREATE TABLE services ( id INT PRIMARY KEY AUTO_INCREMENT COMMENT \u0026#39;服务ID\u0026#39;, merchant_id INT NOT NULL COMMENT \u0026#39;关联商家ID\u0026#39;, name VARCHAR(100) NOT NULL COMMENT \u0026#39;服务名称\u0026#39;, price DECIMAL(10,2) NOT NULL COMMENT \u0026#39;价格\u0026#39;, category VARCHAR(50) NOT NULL COMMENT \u0026#39;分类\u0026#39;, image_url VARCHAR(200) COMMENT \u0026#39;图片地址\u0026#39;, stock INT NOT NULL DEFAULT 0 COMMENT \u0026#39;库存\u0026#39;, status TINYINT NOT NULL DEFAULT 0 COMMENT \u0026#39;状态：0-下架，1-上架\u0026#39;, create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT \u0026#39;创建时间\u0026#39;, FOREIGN KEY (merchant_id) REFERENCES merchants(id) ON DELETE CASCADE ) COMMENT \u0026#39;服务表\u0026#39;; -- 3. 订单表 CREATE TABLE orders ( id INT PRIMARY KEY AUTO_INCREMENT COMMENT \u0026#39;订单ID\u0026#39;, service_id INT NOT NULL COMMENT \u0026#39;关联服务ID\u0026#39;, user_name VARCHAR(50) NOT NULL COMMENT \u0026#39;用户姓名\u0026#39;, user_phone VARCHAR(20) NOT NULL COMMENT \u0026#39;用户电话\u0026#39;, create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT \u0026#39;下单时间\u0026#39;, status TINYINT NOT NULL DEFAULT 0 COMMENT \u0026#39;状态：0-待支付，1-已完成\u0026#39;, FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE ) COMMENT \u0026#39;订单表\u0026#39;; 3.4 插入测试数据 1 2 3 4 5 6 7 8 9 10 11 12 -- 插入测试商家 INSERT INTO merchants (name, address, phone, status) VALUES (\u0026#39;阳光家政\u0026#39;, \u0026#39;北京市朝阳区建国路100号\u0026#39;, \u0026#39;13800138000\u0026#39;, 1), (\u0026#39;快速维修\u0026#39;, \u0026#39;上海市浦东新区张江路200号\u0026#39;, \u0026#39;13900139000\u0026#39;, 1), (\u0026#39;保洁专家\u0026#39;, \u0026#39;广州市天河区体育西路300号\u0026#39;, \u0026#39;13700137000\u0026#39;, 1); -- 插入测试服务 INSERT INTO services (merchant_id, name, price, category, stock, status) VALUES (1, \u0026#39;日常保洁\u0026#39;, 150.00, \u0026#39;家政\u0026#39;, 10, 1), (1, \u0026#39;深度清洁\u0026#39;, 300.00, \u0026#39;家政\u0026#39;, 5, 1), (2, \u0026#39;空调维修\u0026#39;, 200.00, \u0026#39;维修\u0026#39;, 8, 1), (3, \u0026#39;办公室保洁\u0026#39;, 500.00, \u0026#39;保洁\u0026#39;, 3, 1); 💻 阶段二：后端API开发（2-3天） 第1步：创建后端项目 打开cmd，进入server文件夹： 1 cd D:/life-service/server 初始化项目： 1 npm init -y 安装依赖包： 1 npm install express mysql2 cors nodemon 第2步：创建项目文件结构 在 server 文件夹中创建以下文件结构：\n1 2 3 4 5 6 7 8 9 10 11 12 server/ ├── app.js （主入口文件） ├── db/ │ └── index.js （数据库连接） ├── routes/ │ ├── merchant.js （商家接口） │ ├── service.js （服务接口） │ └── order.js （订单接口） └── controllers/ ├── merchantCtrl.js ├── serviceCtrl.js └── orderCtrl.js 第3步：编写后端代码 3.1 数据库连接配置 (db/index.js) 1 2 3 4 5 6 7 8 9 10 11 12 const mysql = require(\u0026#39;mysql2/promise\u0026#39;); const pool = mysql.createPool({ host: \u0026#39;localhost\u0026#39;, user: \u0026#39;root\u0026#39;, password: \u0026#39;123456\u0026#39;, // 改成你的MySQL密码 database: \u0026#39;life_service\u0026#39;, port: 3306 }); console.log(\u0026#39;✅ 数据库连接成功！\u0026#39;); module.exports = pool; 3.2 主入口文件 (app.js) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const express = require(\u0026#39;express\u0026#39;); const cors = require(\u0026#39;cors\u0026#39;); const app = express(); // 中间件 app.use(express.json()); app.use(cors()); // 引入路由 const merchantRouter = require(\u0026#39;./routes/merchant\u0026#39;); const serviceRouter = require(\u0026#39;./routes/service\u0026#39;); const orderRouter = require(\u0026#39;./routes/order\u0026#39;); // 使用路由 app.use(\u0026#39;/api/merchant\u0026#39;, merchantRouter); app.use(\u0026#39;/api/service\u0026#39;, serviceRouter); app.use(\u0026#39;/api/order\u0026#39;, orderRouter); // 启动服务 app.listen(3000, () =\u0026gt; { console.log(\u0026#39;✅ 后端服务启动成功！\u0026#39;); console.log(\u0026#39;📍 访问地址: http://localhost:3000\u0026#39;); }); 3.3 商家控制器 (controllers/merchantCtrl.js) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 const pool = require(\u0026#39;../db\u0026#39;); // 新增商家 exports.addMerchant = async (req, res) =\u0026gt; { const { name, address, phone } = req.body; try { const [result] = await pool.execute( \u0026#39;INSERT INTO merchants (name, address, phone) VALUES (?, ?, ?)\u0026#39;, [name, address, phone] ); res.json({ code: 200, msg: \u0026#39;新增商家成功！\u0026#39;, data: { id: result.insertId } }); } catch (err) { res.json({ code: 500, msg: \u0026#39;服务器出错啦\u0026#39;, error: err.message }); } }; // 获取商家列表 exports.getMerchants = async (req, res) =\u0026gt; { try { const [rows] = await pool.execute(\u0026#39;SELECT * FROM merchants\u0026#39;); res.json({ code: 200, data: rows }); } catch (err) { res.json({ code: 500, msg: \u0026#39;获取商家列表失败\u0026#39;, error: err.message }); } }; 3.4 商家路由 (routes/merchant.js) 1 2 3 4 5 6 7 8 9 10 11 const express = require(\u0026#39;express\u0026#39;); const router = express.Router(); const merchantCtrl = require(\u0026#39;../controllers/merchantCtrl\u0026#39;); // 新增商家 router.post(\u0026#39;/add\u0026#39;, merchantCtrl.addMerchant); // 获取商家列表 router.get(\u0026#39;/list\u0026#39;, merchantCtrl.getMerchants); module.exports = router; 3.5 服务控制器 (controllers/serviceCtrl.js) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 const pool = require(\u0026#39;../db\u0026#39;); // 获取服务列表 exports.getServices = async (req, res) =\u0026gt; { const { category } = req.query; try { let sql = ` SELECT s.*, m.name as merchant_name FROM services s LEFT JOIN merchants m ON s.merchant_id = m.id WHERE s.status = 1 `; let params = []; if (category \u0026amp;\u0026amp; category !== \u0026#39;全部\u0026#39;) { sql += \u0026#39; AND s.category = ?\u0026#39;; params.push(category); } const [rows] = await pool.execute(sql, params); res.json({ code: 200, data: rows }); } catch (err) { res.json({ code: 500, msg: \u0026#39;获取服务列表失败\u0026#39;, error: err.message }); } }; // 新增服务 exports.addService = async (req, res) =\u0026gt; { const { merchant_id, name, price, category, image_url, stock } = req.body; try { const [result] = await pool.execute( \u0026#39;INSERT INTO services (merchant_id, name, price, category, image_url, stock) VALUES (?, ?, ?, ?, ?, ?)\u0026#39;, [merchant_id, name, price, category, image_url, stock] ); res.json({ code: 200, msg: \u0026#39;新增服务成功！\u0026#39;, data: { id: result.insertId } }); } catch (err) { res.json({ code: 500, msg: \u0026#39;新增服务失败\u0026#39;, error: err.message }); } }; 3.6 服务路由 (routes/service.js) 1 2 3 4 5 6 7 8 9 10 11 const express = require(\u0026#39;express\u0026#39;); const router = express.Router(); const serviceCtrl = require(\u0026#39;../controllers/serviceCtrl\u0026#39;); // 获取服务列表 router.get(\u0026#39;/list\u0026#39;, serviceCtrl.getServices); // 新增服务 router.post(\u0026#39;/add\u0026#39;, serviceCtrl.addService); module.exports = router; 3.7 订单控制器 (controllers/orderCtrl.js) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 const pool = require(\u0026#39;../db\u0026#39;); // 创建订单 exports.createOrder = async (req, res) =\u0026gt; { const { service_id, user_name, user_phone } = req.body; try { const [result] = await pool.execute( \u0026#39;INSERT INTO orders (service_id, user_name, user_phone) VALUES (?, ?, ?)\u0026#39;, [service_id, user_name, user_phone] ); res.json({ code: 200, msg: \u0026#39;订单创建成功！\u0026#39;, data: { id: result.insertId } }); } catch (err) { res.json({ code: 500, msg: \u0026#39;创建订单失败\u0026#39;, error: err.message }); } }; // 获取订单列表 exports.getOrders = async (req, res) =\u0026gt; { const { status } = req.query; try { let sql = ` SELECT o.*, s.name as service_name, s.price, m.name as merchant_name FROM orders o LEFT JOIN services s ON o.service_id = s.id LEFT JOIN merchants m ON s.merchant_id = m.id WHERE 1=1 `; let params = []; if (status !== undefined) { sql += \u0026#39; AND o.status = ?\u0026#39;; params.push(status); } sql += \u0026#39; ORDER BY o.create_time DESC\u0026#39;; const [rows] = await pool.execute(sql, params); res.json({ code: 200, data: rows }); } catch (err) { res.json({ code: 500, msg: \u0026#39;获取订单列表失败\u0026#39;, error: err.message }); } }; 3.8 订单路由 (routes/order.js) 1 2 3 4 5 6 7 8 9 10 11 const express = require(\u0026#39;express\u0026#39;); const router = express.Router(); const orderCtrl = require(\u0026#39;../controllers/orderCtrl\u0026#39;); // 创建订单 router.post(\u0026#39;/create\u0026#39;, orderCtrl.createOrder); // 获取订单列表 router.get(\u0026#39;/list\u0026#39;, orderCtrl.getOrders); module.exports = router; 第4步：配置 package.json 脚本 修改 server/package.json 中的 scripts 部分：\n1 2 3 4 5 6 { \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;nodemon app.js\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;node app.js\u0026#34; } } 第5步：启动后端服务 1 2 cd D:/life-service/server npm run dev 看到 ✅ 后端服务启动成功！ 表示后端正常运行。\n第6步：测试后端API 使用 Postman 或浏览器测试接口：\nGET http://localhost:3000/api/merchant/list - 获取商家列表 POST http://localhost:3000/api/merchant/add - 新增商家 🌐 阶段三：Web管理后台开发（3-4天） 第1步：创建Vue项目 打开新的cmd窗口： 1 2 cd D:/life-service vue create web-admin 选择配置：\nVue 3 Babel Router 其他按回车用默认配置 进入项目并安装依赖：\n1 2 cd web-admin npm install axios 第2步：项目结构配置 在 src 文件夹中创建以下结构：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 src/ ├── api/ │ ├── merchant.js │ ├── service.js │ └── order.js ├── components/ ├── views/ │ ├── Merchant/ │ │ └── index.vue │ ├── Service/ │ │ └── index.vue │ └── Order/ │ └── index.vue └── router/ └── index.js 第3步：配置路由 修改 src/router/index.js：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39;; import Merchant from \u0026#39;../views/Merchant/index.vue\u0026#39;; import Service from \u0026#39;../views/Service/index.vue\u0026#39;; import Order from \u0026#39;../views/Order/index.vue\u0026#39;; const routes = [ { path: \u0026#39;/\u0026#39;, redirect: \u0026#39;/merchant\u0026#39; }, { path: \u0026#39;/merchant\u0026#39;, component: Merchant, name: \u0026#39;商家管理\u0026#39; }, { path: \u0026#39;/service\u0026#39;, component: Service, name: \u0026#39;服务管理\u0026#39; }, { path: \u0026#39;/order\u0026#39;, component: Order, name: \u0026#39;订单管理\u0026#39; } ]; const router = createRouter({ history: createWebHistory(), routes }); export default router; 第4步：封装API请求 创建 src/api/merchant.js：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import axios from \u0026#39;axios\u0026#39;; // 配置基础路径 axios.defaults.baseURL = \u0026#39;http://localhost:3000/api\u0026#39;; // 商家相关API export const merchantAPI = { // 新增商家 addMerchant: (data) =\u0026gt; { return axios.post(\u0026#39;/merchant/add\u0026#39;, data); }, // 获取商家列表 getMerchants: () =\u0026gt; { return axios.get(\u0026#39;/merchant/list\u0026#39;); } }; export default merchantAPI; 创建 src/api/service.js：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import axios from \u0026#39;axios\u0026#39;; export const serviceAPI = { // 获取服务列表 getServices: (category = \u0026#39;\u0026#39;) =\u0026gt; { const params = category ? { category } : {}; return axios.get(\u0026#39;/service/list\u0026#39;, { params }); }, // 新增服务 addService: (data) =\u0026gt; { return axios.post(\u0026#39;/service/add\u0026#39;, data); } }; export default serviceAPI; 创建 src/api/order.js：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import axios from \u0026#39;axios\u0026#39;; export const orderAPI = { // 获取订单列表 getOrders: (status) =\u0026gt; { const params = status !== undefined ? { status } : {}; return axios.get(\u0026#39;/order/list\u0026#39;, { params }); }, // 创建订单 createOrder: (data) =\u0026gt; { return axios.post(\u0026#39;/order/create\u0026#39;, data); } }; export default orderAPI; 第5步：开发商家管理页面 创建 src/views/Merchant/index.vue：\nu0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;merchant-page\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;🏪 商家管理\u0026lt;/h2\u0026gt; \u0026lt;!-- 新增商家表单 --\u0026gt; \u0026lt;div class=\u0026#34;add-form\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;➕ 新增商家\u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;input v-model=\u0026#34;newMerchant.name\u0026#34; placeholder=\u0026#34;商家名称\u0026#34; class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input v-model=\u0026#34;newMerchant.address\u0026#34; placeholder=\u0026#34;商家地址\u0026#34; class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input v-model=\u0026#34;newMerchant.phone\u0026#34; placeholder=\u0026#34;联系电话\u0026#34; class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;addMerchant\u0026#34; class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;添加商家\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 商家列表 --\u0026gt; \u0026lt;div class=\u0026#34;merchant-list\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;📋 商家列表\u0026lt;/h3\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;ID\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;名称\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;地址\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;电话\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;状态\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;创建时间\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;merchant in merchants\u0026#34; :key=\u0026#34;merchant.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ merchant.id }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ merchant.name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ merchant.address }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ merchant.phone }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;span :class=\u0026#34;merchant.status === 0 ? \u0026#39;status-pending\u0026#39; : \u0026#39;status-approved\u0026#39;\u0026#34;\u0026gt; {{ merchant.status === 0 ? \u0026#39;审核中\u0026#39; : \u0026#39;已通过\u0026#39; }} \u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ formatTime(merchant.create_time) }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, onMounted } from \u0026#39;vue\u0026#39; import merchantAPI from \u0026#39;../../api/merchant\u0026#39; export default { name: \u0026#39;MerchantView\u0026#39;, setup() { const merchants = ref([]) const newMerchant = ref({ name: \u0026#39;\u0026#39;, address: \u0026#39;\u0026#39;, phone: \u0026#39;\u0026#39; }) // 获取商家列表 const getMerchants = async () =\u0026gt; { try { const response = await merchantAPI.getMerchants() merchants.value = response.data.data } catch (error) { alert(\u0026#39;获取商家列表失败！\u0026#39;) console.error(error) } } // 新增商家 const addMerchant = async () =\u0026gt; { if (!newMerchant.value.name || !newMerchant.value.address || !newMerchant.value.phone) { alert(\u0026#39;请填写完整信息！\u0026#39;) return } try { await merchantAPI.addMerchant(newMerchant.value) alert(\u0026#39;商家添加成功！\u0026#39;) // 清空表单 newMerchant.value = { name: \u0026#39;\u0026#39;, address: \u0026#39;\u0026#39;, phone: \u0026#39;\u0026#39; } // 刷新列表 getMerchants() } catch (error) { alert(\u0026#39;添加商家失败！\u0026#39;) console.error(error) } } // 格式化时间 const formatTime = (timeString) =\u0026gt; { return new Date(timeString).toLocaleString() } // 页面加载时获取数据 onMounted(() =\u0026gt; { getMerchants() }) return { merchants, newMerchant, addMerchant, formatTime } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .merchant-page { padding: 20px; max-width: 1200px; margin: 0 auto; } .add-form { margin: 30px 0; padding: 20px; border: 1px solid #e1e1e1; border-radius: 8px; background: #f9f9f9; } .form-group { display: flex; gap: 10px; align-items: end; flex-wrap: wrap; } .input { padding: 8px 12px; border: 1px solid #ccc; border-radius: 4px; flex: 1; min-width: 200px; } .btn { padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; } .btn-primary { background: #4CAF50; color: white; } .btn-primary:hover { background: #45a049; } .merchant-list { margin-top: 30px; } .table { width: 100%; border-collapse: collapse; margin-top: 10px; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1); } .table th, .table td { border: 1px solid #ddd; padding: 12px; text-align: left; } .table th { background: #f5f5f5; font-weight: bold; } .status-pending { color: #ff9800; font-weight: bold; } .status-approved { color: #4caf50; font-weight: bold; } \u0026lt;/style\u0026gt; 第6步：修改App.vue 更新 src/App.vue：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;nav class=\u0026#34;navbar\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;nav-container\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;nav-title\u0026#34;\u0026gt;全域生活服务平台\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;nav-links\u0026#34;\u0026gt; \u0026lt;router-link to=\u0026#34;/merchant\u0026#34; class=\u0026#34;nav-link\u0026#34;\u0026gt;商家管理\u0026lt;/router-link\u0026gt; \u0026lt;router-link to=\u0026#34;/service\u0026#34; class=\u0026#34;nav-link\u0026#34;\u0026gt;服务管理\u0026lt;/router-link\u0026gt; \u0026lt;router-link to=\u0026#34;/order\u0026#34; class=\u0026#34;nav-link\u0026#34;\u0026gt;订单管理\u0026lt;/router-link\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;main class=\u0026#34;main-content\u0026#34;\u0026gt; \u0026lt;router-view /\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#39;App\u0026#39; } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: \u0026#39;Segoe UI\u0026#39;, Tahoma, Geneva, Verdana, sans-serif; background: #f5f5f5; } .navbar { background: #2c3e50; color: white; padding: 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1); } .nav-container { max-width: 1200px; margin: 0 auto; display: flex; justify-content: space-between; align-items: center; padding: 0 20px; } .nav-title { font-size: 24px; font-weight: bold; } .nav-links { display: flex; gap: 20px; } .nav-link { color: white; text-decoration: none; padding: 15px 20px; border-radius: 4px; transition: background 0.3s; } .nav-link:hover, .nav-link.router-link-active { background: #34495e; } .main-content { min-height: calc(100vh - 60px); padding: 20px; } \u0026lt;/style\u0026gt; 第7步：开发服务管理页面 创建 src/views/Service/index.vue：\nu0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;service-page\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;🛎️ 服务管理\u0026lt;/h2\u0026gt; \u0026lt;!-- 新增服务表单 --\u0026gt; \u0026lt;div class=\u0026#34;add-form\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;➕ 新增服务\u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026#34;form-grid\u0026#34;\u0026gt; \u0026lt;input v-model=\u0026#34;newService.name\u0026#34; placeholder=\u0026#34;服务名称\u0026#34; class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;select v-model=\u0026#34;newService.merchant_id\u0026#34; class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;\u0026#34;\u0026gt;选择商家\u0026lt;/option\u0026gt; \u0026lt;option v-for=\u0026#34;merchant in merchants\u0026#34; :key=\u0026#34;merchant.id\u0026#34; :value=\u0026#34;merchant.id\u0026#34;\u0026gt; {{ merchant.name }} \u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;input v-model=\u0026#34;newService.price\u0026#34; type=\u0026#34;number\u0026#34; placeholder=\u0026#34;价格\u0026#34; class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;select v-model=\u0026#34;newService.category\u0026#34; class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;\u0026#34;\u0026gt;选择分类\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;家政\u0026#34;\u0026gt;家政\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;维修\u0026#34;\u0026gt;维修\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;保洁\u0026#34;\u0026gt;保洁\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;input v-model=\u0026#34;newService.stock\u0026#34; type=\u0026#34;number\u0026#34; placeholder=\u0026#34;库存\u0026#34; class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input v-model=\u0026#34;newService.image_url\u0026#34; placeholder=\u0026#34;图片URL\u0026#34; class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;addService\u0026#34; class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;添加服务\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 服务列表 --\u0026gt; \u0026lt;div class=\u0026#34;service-list\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;📋 服务列表\u0026lt;/h3\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;ID\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;服务名称\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;商家\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;分类\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;库存\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;状态\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;service in services\u0026#34; :key=\u0026#34;service.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ service.id }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ service.name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ service.merchant_name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;¥{{ service.price }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ service.category }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ service.stock }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;span :class=\u0026#34;service.status === 0 ? \u0026#39;status-off\u0026#39; : \u0026#39;status-on\u0026#39;\u0026#34;\u0026gt; {{ service.status === 0 ? \u0026#39;下架\u0026#39; : \u0026#39;上架\u0026#39; }} \u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, onMounted } from \u0026#39;vue\u0026#39; import serviceAPI from \u0026#39;../../api/service\u0026#39; import merchantAPI from \u0026#39;../../api/merchant\u0026#39; export default { name: \u0026#39;ServiceView\u0026#39;, setup() { const services = ref([]) const merchants = ref([]) const newService = ref({ name: \u0026#39;\u0026#39;, merchant_id: \u0026#39;\u0026#39;, price: \u0026#39;\u0026#39;, category: \u0026#39;\u0026#39;, stock: \u0026#39;\u0026#39;, image_url: \u0026#39;\u0026#39; }) // 获取服务列表 const getServices = async () =\u0026gt; { try { const response = await serviceAPI.getServices() services.value = response.data.data } catch (error) { alert(\u0026#39;获取服务列表失败！\u0026#39;) console.error(error) } } // 获取商家列表 const getMerchants = async () =\u0026gt; { try { const response = await merchantAPI.getMerchants() merchants.value = response.data.data } catch (error) { alert(\u0026#39;获取商家列表失败！\u0026#39;) console.error(error) } } // 新增服务 const addService = async () =\u0026gt; { if (!newService.value.name || !newService.value.merchant_id || !newService.value.price) { alert(\u0026#39;请填写完整信息！\u0026#39;) return } try { await serviceAPI.addService(newService.value) alert(\u0026#39;服务添加成功！\u0026#39;) // 清空表单 newService.value = { name: \u0026#39;\u0026#39;, merchant_id: \u0026#39;\u0026#39;, price: \u0026#39;\u0026#39;, category: \u0026#39;\u0026#39;, stock: \u0026#39;\u0026#39;, image_url: \u0026#39;\u0026#39; } // 刷新列表 getServices() } catch (error) { alert(\u0026#39;添加服务失败！\u0026#39;) console.error(error) } } // 页面加载时获取数据 onMounted(() =\u0026gt; { getServices() getMerchants() }) return { services, merchants, newService, addService } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .service-page { padding: 20px; max-width: 1200px; margin: 0 auto; } .add-form { margin: 30px 0; padding: 20px; border: 1px solid #e1e1e1; border-radius: 8px; background: #f9f9f9; } .form-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; align-items: end; } .input { padding: 8px 12px; border: 1px solid #ccc; border-radius: 4px; width: 100%; } .btn { padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; grid-column: 1 / -1; justify-self: start; } .btn-primary { background: #4CAF50; color: white; } .btn-primary:hover { background: #45a049; } .service-list { margin-top: 30px; } .table { width: 100%; border-collapse: collapse; margin-top: 10px; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1); } .table th, .table td { border: 1px solid #ddd; padding: 12px; text-align: left; } .table th { background: #f5f5f5; font-weight: bold; } .status-on { color: #4caf50; font-weight: bold; } .status-off { color: #f44336; font-weight: bold; } \u0026lt;/style\u0026gt; 第8步：开发订单管理页面 创建 src/views/Order/index.vue：\nu0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;order-page\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;📦 订单管理\u0026lt;/h2\u0026gt; \u0026lt;!-- 筛选条件 --\u0026gt; \u0026lt;div class=\u0026#34;filter-section\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;筛选条件\u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026#34;filter-group\u0026#34;\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; v-model=\u0026#34;filterStatus\u0026#34; value=\u0026#34;\u0026#34;\u0026gt; 全部订单 \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; v-model=\u0026#34;filterStatus\u0026#34; value=\u0026#34;0\u0026#34;\u0026gt; 待支付 \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; v-model=\u0026#34;filterStatus\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt; 已完成 \u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 订单列表 --\u0026gt; \u0026lt;div class=\u0026#34;order-list\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;订单列表\u0026lt;/h3\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;订单ID\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;服务名称\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;商家\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;用户姓名\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;用户电话\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;状态\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;下单时间\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;order in orders\u0026#34; :key=\u0026#34;order.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ order.id }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ order.service_name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ order.merchant_name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ order.user_name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ order.user_phone }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;¥{{ order.price }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;span :class=\u0026#34;order.status === 0 ? \u0026#39;status-pending\u0026#39; : \u0026#39;status-completed\u0026#39;\u0026#34;\u0026gt; {{ order.status === 0 ? \u0026#39;待支付\u0026#39; : \u0026#39;已完成\u0026#39; }} \u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ formatTime(order.create_time) }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { ref, onMounted, watch } from \u0026#39;vue\u0026#39; import orderAPI from \u0026#39;../../api/order\u0026#39; export default { name: \u0026#39;OrderView\u0026#39;, setup() { const orders = ref([]) const filterStatus = ref(\u0026#39;\u0026#39;) // 获取订单列表 const getOrders = async (status = \u0026#39;\u0026#39;) =\u0026gt; { try { const response = await orderAPI.getOrders(status) orders.value = response.data.data } catch (error) { alert(\u0026#39;获取订单列表失败！\u0026#39;) console.error(error) } } // 格式化时间 const formatTime = (timeString) =\u0026gt; { return new Date(timeString).toLocaleString() } // 监听筛选条件变化 watch(filterStatus, (newStatus) =\u0026gt; { getOrders(newStatus) }) // 页面加载时获取数据 onMounted(() =\u0026gt; { getOrders() }) return { orders, filterStatus, formatTime } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .order-page { padding: 20px; max-width: 1200px; margin: 0 auto; } .filter-section { margin: 30px 0; padding: 20px; border: 1px solid #e1e1e1; border-radius: 8px; background: #f9f9f9; } .filter-group { display: flex; gap: 20px; margin-top: 10px; } .filter-group label { display: flex; align-items: center; gap: 5px; cursor: pointer; } .order-list { margin-top: 30px; } .table { width: 100%; border-collapse: collapse; margin-top: 10px; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1); } .table th, .table td { border: 1px solid #ddd; padding: 12px; text-align: left; } .table th { background: #f5f5f5; font-weight: bold; } .status-pending { color: #ff9800; font-weight: bold; } .status-completed { color: #4caf50; font-weight: bold; } \u0026lt;/style\u0026gt; 第9步：启动Web管理后台 1 2 cd D:/life-service/web-admin npm run serve 访问：http://localhost:8080\n📱 阶段四：微信小程序开发（3-4天） 第1步：创建小程序项目 打开微信开发者工具 点击\u0026quot;新建项目\u0026quot; 填写信息： 项目名称：生活服务平台 目录：选择 D:/life-service/mini-user AppID：点击\u0026quot;测试号\u0026quot; 后端服务：不使用云服务 点击\u0026quot;新建\u0026quot; 第2步：项目结构配置 在小程序项目中创建以下结构：\n1 2 3 4 5 6 7 8 9 10 mini-user/ ├── pages/ │ ├── index/（首页） │ ├── serviceList/（服务列表） │ ├── orderCreate/（创建订单） │ └── orderList/（订单列表） ├── utils/ │ └── request.js（请求封装） ├── images/（图片资源） └── app.js（小程序入口） 第3步：封装网络请求 创建 utils/request.js：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 const request = (url, method = \u0026#39;GET\u0026#39;, data = {}) =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { wx.request({ url: \u0026#39;http://localhost:3000/api\u0026#39; + url, method, data, success: (res) =\u0026gt; { if (res.data.code === 200) { resolve(res.data.data) } else { reject(res.data.msg) } }, fail: (err) =\u0026gt; { reject(\u0026#39;网络请求失败：\u0026#39; + err.errMsg) } }) }) } module.exports = request 第4步：配置小程序页面 修改 app.json：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \u0026#34;pages\u0026#34;: [ \u0026#34;pages/index/index\u0026#34;, \u0026#34;pages/serviceList/serviceList\u0026#34;, \u0026#34;pages/orderCreate/orderCreate\u0026#34;, \u0026#34;pages/orderList/orderList\u0026#34; ], \u0026#34;window\u0026#34;: { \u0026#34;backgroundTextStyle\u0026#34;: \u0026#34;light\u0026#34;, \u0026#34;navigationBarBackgroundColor\u0026#34;: \u0026#34;#2c3e50\u0026#34;, \u0026#34;navigationBarTitleText\u0026#34;: \u0026#34;生活服务平台\u0026#34;, \u0026#34;navigationBarTextStyle\u0026#34;: \u0026#34;white\u0026#34; }, \u0026#34;style\u0026#34;: \u0026#34;v2\u0026#34;, \u0026#34;sitemapLocation\u0026#34;: \u0026#34;sitemap.json\u0026#34; } 第5步：开发首页 创建 pages/index/index.js：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 const request = require(\u0026#39;../../utils/request\u0026#39;) Page({ data: { services: [], categories: [ { name: \u0026#39;家政\u0026#39;, icon: \u0026#39;🏠\u0026#39;, type: \u0026#39;家政\u0026#39; }, { name: \u0026#39;维修\u0026#39;, icon: \u0026#39;🔧\u0026#39;, type: \u0026#39;维修\u0026#39; }, { name: \u0026#39;保洁\u0026#39;, icon: \u0026#39;✨\u0026#39;, type: \u0026#39;保洁\u0026#39; } ] }, onLoad() { this.getServices() }, // 获取推荐服务 async getServices() { try { const services = await request(\u0026#39;/service/list\u0026#39;) // 只取前4个作为推荐 this.setData({ services: services.slice(0, 4) }) } catch (err) { wx.showToast({ title: \u0026#39;加载失败\u0026#39;, icon: \u0026#39;none\u0026#39; }) } }, // 跳转到服务列表 toServiceList(e) { const type = e.currentTarget.dataset.type wx.navigateTo({ url: `/pages/serviceList/serviceList?type=${type}` }) }, // 跳转到订单列表 toOrderList() { wx.navigateTo({ url: \u0026#39;/pages/orderList/orderList\u0026#39; }) } }) 创建 pages/index/index.wxml：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 \u0026lt;view class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;!-- 头部 --\u0026gt; \u0026lt;view class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;title\u0026#34;\u0026gt;生活服务平台\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;subtitle\u0026#34;\u0026gt;便捷生活，一键送达\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;!-- 服务分类 --\u0026gt; \u0026lt;view class=\u0026#34;category-section\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;section-title\u0026#34;\u0026gt;服务分类\u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;category-grid\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;category-item\u0026#34; wx:for=\u0026#34;{{categories}}\u0026#34; wx:key=\u0026#34;type\u0026#34; bindtap=\u0026#34;toServiceList\u0026#34; data-type=\u0026#34;{{item.type}}\u0026#34; \u0026gt; \u0026lt;text class=\u0026#34;category-icon\u0026#34;\u0026gt;{{item.icon}}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;category-name\u0026#34;\u0026gt;{{item.name}}\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;!-- 推荐服务 --\u0026gt; \u0026lt;view class=\u0026#34;recommend-section\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;section-header\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;section-title\u0026#34;\u0026gt;推荐服务\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;more\u0026#34; bindtap=\u0026#34;toServiceList\u0026#34; data-type=\u0026#34;\u0026#34;\u0026gt;查看更多\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;service-grid\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;service-card\u0026#34; wx:for=\u0026#34;{{services}}\u0026#34; wx:key=\u0026#34;id\u0026#34; bindtap=\u0026#34;toOrderCreate\u0026#34; data-service=\u0026#34;{{item}}\u0026#34; \u0026gt; \u0026lt;image class=\u0026#34;service-image\u0026#34; src=\u0026#34;{{item.image_url || \u0026#39;/images/default-service.png\u0026#39;}}\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; \u0026lt;view class=\u0026#34;service-info\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;service-name\u0026#34;\u0026gt;{{item.name}}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;service-merchant\u0026#34;\u0026gt;{{item.merchant_name}}\u0026lt;/text\u0026gt; \u0026lt;view class=\u0026#34;service-bottom\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;service-price\u0026#34;\u0026gt;¥{{item.price}}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;service-category\u0026#34;\u0026gt;{{item.category}}\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;!-- 底部导航 --\u0026gt; \u0026lt;view class=\u0026#34;bottom-nav\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;nav-item\u0026#34; bindtap=\u0026#34;toServiceList\u0026#34; data-type=\u0026#34;\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;nav-icon\u0026#34;\u0026gt;🔍\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;nav-text\u0026#34;\u0026gt;全部服务\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;nav-item\u0026#34; bindtap=\u0026#34;toOrderList\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;nav-icon\u0026#34;\u0026gt;📦\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;nav-text\u0026#34;\u0026gt;我的订单\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; 创建 pages/index/index.wxss：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 .container { padding: 20rpx; background: #f5f5f5; min-height: 100vh; } /* 头部样式 */ .header { text-align: center; margin: 40rpx 0 60rpx; } .title { display: block; font-size: 48rpx; font-weight: bold; color: #2c3e50; margin-bottom: 10rpx; } .subtitle { display: block; font-size: 28rpx; color: #7f8c8d; } /* 分类区域 */ .category-section { margin-bottom: 40rpx; } .section-title { font-size: 36rpx; font-weight: bold; color: #2c3e50; margin-bottom: 30rpx; display: block; } .category-grid { display: flex; justify-content: space-around; background: white; padding: 30rpx; border-radius: 20rpx; box-shadow: 0 4rpx 20rpx rgba(0,0,0,0.1); } .category-item { display: flex; flex-direction: column; align-items: center; } .category-icon { font-size: 60rpx; margin-bottom: 15rpx; } .category-name { font-size: 28rpx; color: #2c3e50; } /* 推荐服务 */ .recommend-section { margin-bottom: 100rpx; } .section-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30rpx; } .more { font-size: 28rpx; color: #3498db; } .service-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20rpx; } .service-card { background: white; border-radius: 20rpx; overflow: hidden; box-shadow: 0 4rpx 20rpx rgba(0,0,0,0.1); } .service-image { width: 100%; height: 200rpx; background: #ecf0f1; } .service-info { padding: 20rpx; } .service-name { display: block; font-size: 30rpx; font-weight: bold; color: #2c3e50; margin-bottom: 10rpx; } .service-merchant { display: block; font-size: 24rpx; color: #7f8c8d; margin-bottom: 15rpx; } .service-bottom { display: flex; justify-content: space-between; align-items: center; } .service-price { color: #e74c3c; font-size: 28rpx; font-weight: bold; } .service-category { font-size: 24rpx; color: #3498db; background: #ecf0f1; padding: 5rpx 15rpx; border-radius: 20rpx; } /* 底部导航 */ .bottom-nav { position: fixed; bottom: 0; left: 0; right: 0; background: white; display: flex; padding: 20rpx; box-shadow: 0 -2rpx 20rpx rgba(0,0,0,0.1); } .nav-item { flex: 1; display: flex; flex-direction: column; align-items: center; } .nav-icon { font-size: 40rpx; margin-bottom: 10rpx; } .nav-text { font-size: 24rpx; color: #2c3e50; } 第6步：开发服务列表页面 创建 pages/serviceList/serviceList.js：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 const request = require(\u0026#39;../../utils/request\u0026#39;) Page({ data: { services: [], categories: [\u0026#39;全部\u0026#39;, \u0026#39;家政\u0026#39;, \u0026#39;维修\u0026#39;, \u0026#39;保洁\u0026#39;], activeCategory: \u0026#39;全部\u0026#39;, searchKeyword: \u0026#39;\u0026#39; }, onLoad(options) { if (options.type) { this.setData({ activeCategory: options.type }) } this.getServices() }, // 获取服务列表 async getServices() { const { activeCategory, searchKeyword } = this.data try { let category = activeCategory === \u0026#39;全部\u0026#39; ? \u0026#39;\u0026#39; : activeCategory let services = await request(\u0026#39;/service/list\u0026#39;, \u0026#39;GET\u0026#39;, { category }) // 前端搜索过滤 if (searchKeyword) { services = services.filter(service =\u0026gt; service.name.includes(searchKeyword) || service.merchant_name.includes(searchKeyword) ) } this.setData({ services }) } catch (err) { wx.showToast({ title: \u0026#39;加载失败\u0026#39;, icon: \u0026#39;none\u0026#39; }) } }, // 切换分类 switchCategory(e) { const category = e.currentTarget.dataset.category this.setData({ activeCategory: category, searchKeyword: \u0026#39;\u0026#39; }) this.getServices() }, // 搜索输入 onSearchInput(e) { this.setData({ searchKeyword: e.detail.value }) }, // 执行搜索 onSearch() { this.getServices() }, // 跳转到下单页面 toOrderCreate(e) { const service = e.currentTarget.dataset.service wx.navigateTo({ url: `/pages/orderCreate/orderCreate?service=${JSON.stringify(service)}` }) } }) 创建 pages/serviceList/serviceList.wxml：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 \u0026lt;view class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;!-- 搜索框 --\u0026gt; \u0026lt;view class=\u0026#34;search-box\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;search-input\u0026#34; placeholder=\u0026#34;搜索服务或商家...\u0026#34; value=\u0026#34;{{searchKeyword}}\u0026#34; bindinput=\u0026#34;onSearchInput\u0026#34; /\u0026gt; \u0026lt;button class=\u0026#34;search-btn\u0026#34; bindtap=\u0026#34;onSearch\u0026#34;\u0026gt;搜索\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;!-- 分类筛选 --\u0026gt; \u0026lt;scroll-view class=\u0026#34;category-scroll\u0026#34; scroll-x\u0026gt; \u0026lt;view class=\u0026#34;category-list\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;category-item {{activeCategory === item ? \u0026#39;active\u0026#39; : \u0026#39;\u0026#39;}}\u0026#34; wx:for=\u0026#34;{{categories}}\u0026#34; wx:key=\u0026#34;*this\u0026#34; bindtap=\u0026#34;switchCategory\u0026#34; data-category=\u0026#34;{{item}}\u0026#34; \u0026gt; {{item}} \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/scroll-view\u0026gt; \u0026lt;!-- 服务列表 --\u0026gt; \u0026lt;view class=\u0026#34;service-list\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;service-item\u0026#34; wx:for=\u0026#34;{{services}}\u0026#34; wx:key=\u0026#34;id\u0026#34; bindtap=\u0026#34;toOrderCreate\u0026#34; data-service=\u0026#34;{{item}}\u0026#34; \u0026gt; \u0026lt;image class=\u0026#34;service-image\u0026#34; src=\u0026#34;{{item.image_url || \u0026#39;/images/default-service.png\u0026#39;}}\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; \u0026lt;view class=\u0026#34;service-content\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;service-header\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;service-name\u0026#34;\u0026gt;{{item.name}}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;service-price\u0026#34;\u0026gt;¥{{item.price}}\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;service-merchant\u0026#34;\u0026gt;{{item.merchant_name}}\u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;service-footer\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;service-category\u0026#34;\u0026gt;{{item.category}}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;service-stock\u0026#34;\u0026gt;库存: {{item.stock}}\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;!-- 空状态 --\u0026gt; \u0026lt;view class=\u0026#34;empty-state\u0026#34; wx:if=\u0026#34;{{services.length === 0}}\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;empty-text\u0026#34;\u0026gt;暂无服务\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; 创建 pages/serviceList/serviceList.wxss：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 .container { padding: 20rpx; background: #f5f5f5; min-height: 100vh; } /* 搜索框 */ .search-box { display: flex; gap: 20rpx; margin-bottom: 30rpx; } .search-input { flex: 1; background: white; padding: 20rpx; border-radius: 10rpx; font-size: 28rpx; } .search-btn { background: #3498db; color: white; border: none; border-radius: 10rpx; padding: 0 30rpx; font-size: 28rpx; } /* 分类筛选 */ .category-scroll { white-space: nowrap; margin-bottom: 30rpx; } .category-list { display: inline-flex; gap: 20rpx; } .category-item { display: inline-block; padding: 15rpx 30rpx; background: white; border-radius: 30rpx; font-size: 28rpx; color: #666; } .category-item.active { background: #3498db; color: white; } /* 服务列表 */ .service-list { display: flex; flex-direction: column; gap: 20rpx; } .service-item { display: flex; background: white; border-radius: 20rpx; overflow: hidden; box-shadow: 0 4rpx 20rpx rgba(0,0,0,0.1); } .service-image { width: 200rpx; height: 200rpx; background: #ecf0f1; } .service-content { flex: 1; padding: 30rpx; display: flex; flex-direction: column; justify-content: space-between; } .service-header { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15rpx; } .service-name { font-size: 32rpx; font-weight: bold; color: #2c3e50; flex: 1; margin-right: 20rpx; } .service-price { font-size: 32rpx; color: #e74c3c; font-weight: bold; } .service-merchant { font-size: 26rpx; color: #7f8c8d; margin-bottom: 15rpx; } .service-footer { display: flex; justify-content: space-between; align-items: center; } .service-category { font-size: 24rpx; color: #3498db; background: #ecf0f1; padding: 8rpx 20rpx; border-radius: 20rpx; } .service-stock { font-size: 24rpx; color: #95a5a6; } /* 空状态 */ .empty-state { text-align: center; padding: 100rpx 0; } .empty-text { font-size: 32rpx; color: #bdc3c7; } 第7步：开发创建订单页面 创建 pages/orderCreate/orderCreate.js：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 const request = require(\u0026#39;../../utils/request\u0026#39;) Page({ data: { service: null, userInfo: { name: \u0026#39;\u0026#39;, phone: \u0026#39;\u0026#39; } }, onLoad(options) { if (options.service) { const service = JSON.parse(options.service) this.setData({ service }) } }, // 输入用户姓名 onNameInput(e) { this.setData({ \u0026#39;userInfo.name\u0026#39;: e.detail.value }) }, // 输入用户电话 onPhoneInput(e) { this.setData({ \u0026#39;userInfo.phone\u0026#39;: e.detail.value }) }, // 提交订单 async submitOrder() { const { service, userInfo } = this.data if (!userInfo.name.trim()) { wx.showToast({ title: \u0026#39;请输入姓名\u0026#39;, icon: \u0026#39;none\u0026#39; }) return } if (!userInfo.phone.trim()) { wx.showToast({ title: \u0026#39;请输入手机号\u0026#39;, icon: \u0026#39;none\u0026#39; }) return } // 简单的手机号验证 const phoneRegex = /^1[3-9]\\d{9}$/ if (!phoneRegex.test(userInfo.phone)) { wx.showToast({ title: \u0026#39;请输入正确的手机号\u0026#39;, icon: \u0026#39;none\u0026#39; }) return } try { wx.showLoading({ title: \u0026#39;提交中...\u0026#39; }) await request(\u0026#39;/order/create\u0026#39;, \u0026#39;POST\u0026#39;, { service_id: service.id, user_name: userInfo.name, user_phone: userInfo.phone }) wx.hideLoading() wx.showToast({ title: \u0026#39;订单创建成功！\u0026#39;, icon: \u0026#39;success\u0026#39;, duration: 2000 }) // 跳转到订单列表 setTimeout(() =\u0026gt; { wx.navigateTo({ url: \u0026#39;/pages/orderList/orderList\u0026#39; }) }, 2000) } catch (err) { wx.hideLoading() wx.showToast({ title: \u0026#39;订单创建失败\u0026#39;, icon: \u0026#39;none\u0026#39; }) } } }) 创建 pages/orderCreate/orderCreate.wxml：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \u0026lt;view class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;!-- 服务信息 --\u0026gt; \u0026lt;view class=\u0026#34;service-card\u0026#34; wx:if=\u0026#34;{{service}}\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;card-title\u0026#34;\u0026gt;服务信息\u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;service-info\u0026#34;\u0026gt; \u0026lt;image class=\u0026#34;service-image\u0026#34; src=\u0026#34;{{service.image_url || \u0026#39;/images/default-service.png\u0026#39;}}\u0026#34;\u0026gt;\u0026lt;/image\u0026gt; \u0026lt;view class=\u0026#34;service-details\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;service-name\u0026#34;\u0026gt;{{service.name}}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;service-merchant\u0026#34;\u0026gt;{{service.merchant_name}}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;service-price\u0026#34;\u0026gt;¥{{service.price}}\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;!-- 用户信息表单 --\u0026gt; \u0026lt;view class=\u0026#34;form-card\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;card-title\u0026#34;\u0026gt;填写订单信息\u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;form-label\u0026#34;\u0026gt;姓名\u0026lt;/text\u0026gt; \u0026lt;input class=\u0026#34;form-input\u0026#34; placeholder=\u0026#34;请输入您的姓名\u0026#34; value=\u0026#34;{{userInfo.name}}\u0026#34; bindinput=\u0026#34;onNameInput\u0026#34; /\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;form-label\u0026#34;\u0026gt;手机号\u0026lt;/text\u0026gt; \u0026lt;input class=\u0026#34;form-input\u0026#34; placeholder=\u0026#34;请输入您的手机号\u0026#34; type=\u0026#34;number\u0026#34; value=\u0026#34;{{userInfo.phone}}\u0026#34; bindinput=\u0026#34;onPhoneInput\u0026#34; /\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;!-- 提交按钮 --\u0026gt; \u0026lt;view class=\u0026#34;submit-section\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;price-display\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;price-label\u0026#34;\u0026gt;总计：\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;price-amount\u0026#34;\u0026gt;¥{{service ? service.price : \u0026#39;0\u0026#39;}}\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;button class=\u0026#34;submit-btn\u0026#34; bindtap=\u0026#34;submitOrder\u0026#34;\u0026gt;立即下单\u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; 创建 pages/orderCreate/orderCreate.wxss：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 .container { padding: 20rpx; background: #f5f5f5; min-height: 100vh; padding-bottom: 200rpx; } /* 卡片样式 */ .service-card, .form-card { background: white; border-radius: 20rpx; padding: 30rpx; margin-bottom: 20rpx; box-shadow: 0 4rpx 20rpx rgba(0,0,0,0.1); } .card-title { font-size: 32rpx; font-weight: bold; color: #2c3e50; margin-bottom: 30rpx; } /* 服务信息 */ .service-info { display: flex; gap: 30rpx; } .service-image { width: 120rpx; height: 120rpx; border-radius: 10rpx; background: #ecf0f1; } .service-details { flex: 1; display: flex; flex-direction: column; justify-content: space-between; } .service-name { font-size: 32rpx; font-weight: bold; color: #2c3e50; } .service-merchant { font-size: 26rpx; color: #7f8c8d; } .service-price { font-size: 36rpx; color: #e74c3c; font-weight: bold; } /* 表单样式 */ .form-item { display: flex; align-items: center; padding: 30rpx 0; border-bottom: 1rpx solid #ecf0f1; } .form-item:last-child { border-bottom: none; } .form-label { font-size: 30rpx; color: #2c3e50; width: 150rpx; } .form-input { flex: 1; font-size: 30rpx; color: #2c3e50; } /* 提交区域 */ .submit-section { position: fixed; bottom: 0; left: 0; right: 0; background: white; padding: 30rpx; display: flex; align-items: center; justify-content: space-between; box-shadow: 0 -2rpx 20rpx rgba(0,0,0,0.1); } .price-display { display: flex; align-items: baseline; } .price-label { font-size: 28rpx; color: #2c3e50; margin-right: 10rpx; } .price-amount { font-size: 40rpx; color: #e74c3c; font-weight: bold; } .submit-btn { background: #e74c3c; color: white; border: none; border-radius: 50rpx; padding: 25rpx 60rpx; font-size: 32rpx; font-weight: bold; } 第8步：开发订单列表页面 创建 pages/orderList/orderList.js：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 const request = require(\u0026#39;../../utils/request\u0026#39;) Page({ data: { orders: [] }, onLoad() { this.getOrders() }, onShow() { this.getOrders() }, // 获取订单列表 async getOrders() { try { const orders = await request(\u0026#39;/order/list\u0026#39;) this.setData({ orders }) } catch (err) { wx.showToast({ title: \u0026#39;加载失败\u0026#39;, icon: \u0026#39;none\u0026#39; }) } }, // 格式化时间 formatTime(timeString) { const date = new Date(timeString) return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, \u0026#39;0\u0026#39;)}-${date.getDate().toString().padStart(2, \u0026#39;0\u0026#39;)} ${date.getHours().toString().padStart(2, \u0026#39;0\u0026#39;)}:${date.getMinutes().toString().padStart(2, \u0026#39;0\u0026#39;)}` } }) 创建 pages/orderList/orderList.wxml：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;view class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;title\u0026#34;\u0026gt;我的订单\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;order-list\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;order-item\u0026#34; wx:for=\u0026#34;{{orders}}\u0026#34; wx:key=\u0026#34;id\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;order-header\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;order-no\u0026#34;\u0026gt;订单号: {{item.id}}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;order-status {{item.status === 0 ? \u0026#39;pending\u0026#39; : \u0026#39;completed\u0026#39;}}\u0026#34;\u0026gt; {{item.status === 0 ? \u0026#39;待支付\u0026#39; : \u0026#39;已完成\u0026#39;}} \u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;order-content\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;service-info\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;service-name\u0026#34;\u0026gt;{{item.service_name}}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;merchant-name\u0026#34;\u0026gt;{{item.merchant_name}}\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;text class=\u0026#34;service-price\u0026#34;\u0026gt;¥{{item.price}}\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;order-footer\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;user-info\u0026#34;\u0026gt;{{item.user_name}} · {{item.user_phone}}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;order-time\u0026#34;\u0026gt;{{formatTime(item.create_time)}}\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;empty-state\u0026#34; wx:if=\u0026#34;{{orders.length === 0}}\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;empty-text\u0026#34;\u0026gt;暂无订单\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;empty-desc\u0026#34;\u0026gt;去首页看看有什么服务吧\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; 创建 pages/orderList/orderList.wxss：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 .container { padding: 20rpx; background: #f5f5f5; min-height: 100vh; } .header { text-align: center; margin: 40rpx 0; } .title { font-size: 48rpx; font-weight: bold; color: #2c3e50; } .order-list { display: flex; flex-direction: column; gap: 20rpx; } .order-item { background: white; border-radius: 20rpx; padding: 30rpx; box-shadow: 0 4rpx 20rpx rgba(0,0,0,0.1); } .order-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20rpx; padding-bottom: 20rpx; border-bottom: 1rpx solid #ecf0f1; } .order-no { font-size: 26rpx; color: #7f8c8d; } .order-status { font-size: 26rpx; font-weight: bold; padding: 8rpx 20rpx; border-radius: 20rpx; } .order-status.pending { background: #fff3cd; color: #856404; } .order-status.completed { background: #d4edda; color: #155724; } .order-content { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 20rpx; } .service-info { flex: 1; } .service-name { display: block; font-size: 32rpx; font-weight: bold; color: #2c3e50; margin-bottom: 10rpx; } .merchant-name { font-size: 26rpx; color: #7f8c8d; } .service-price { font-size: 36rpx; color: #e74c3c; font-weight: bold; } .order-footer { display: flex; justify-content: space-between; align-items: center; padding-top: 20rpx; border-top: 1rpx solid #ecf0f1; } .user-info { font-size: 26rpx; color: #2c3e50; } .order-time { font-size: 24rpx; color: #95a5a6; } .empty-state { text-align: center; padding: 100rpx 0; } .empty-text { display: block; font-size: 32rpx; color: #bdc3c7; margin-bottom: 20rpx; } .empty-desc { display: block; font-size: 28rpx; color: #bdc3c7; } 第9步：配置小程序入口 修改 app.js：\n1 2 3 4 5 6 7 8 9 App({ onLaunch() { console.log(\u0026#39;小程序启动\u0026#39;) }, globalData: { userInfo: null } }) 🧪 阶段五：集成测试与上线 第1步：完整流程测试 测试流程： 启动所有服务：\n1 2 3 4 5 6 7 # 终端1 - 后端 cd D:/life-service/server npm run dev # 终端2 - 前端 cd D:/life-service/web-admin npm run serve 在DataGrip中监控数据：\n实时查看表数据变化 验证外键关系 测试完整业务流程：\nWeb端：添加商家 → 添加服务 小程序：浏览服务 → 下单 Web端：查看订单 第2步：代码优化 后端优化： 添加参数验证 错误处理完善 添加日志记录 前端优化： 加载状态提示 错误边界处理 表单验证加强 第3步：部署准备 整理项目文档： 创建 README.md：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # 全域生活服务平台 ## 项目介绍 一个完整的生活服务平台，包含Web管理后台和微信小程序。 ## 技术栈 - 后端：Node.js + Express + MySQL - 前端：Vue 3 + Vue Router - 小程序：微信小程序原生开发 - 数据库：MySQL 8.0 - 工具：DataGrip ## 启动步骤 ### 后端 1. cd server 2. npm install 3. 修改 db/index.js 中的数据库密码 4. npm run dev ### Web管理后台 1. cd web-admin 2. npm install 3. npm run serve ### 小程序 1. 微信开发者工具中打开 mini-user 文件夹 2. 点击预览 第4步：Git版本控制 1 2 3 4 5 6 7 8 9 10 11 12 13 # 初始化Git cd D:/life-service git init # 添加所有文件 git add . # 提交代码 git commit -m \u0026#34;初始提交：完成全域生活服务平台开发\u0026#34; # 推送到GitHub/Gitee git remote add origin 你的仓库地址 git push -u origin main 🎉 项目完成！ 你已掌握的技能： ✅ 全栈开发：前端 + 后端 + 数据库\n✅ 多端开发：Web + 微信小程序\n✅ 数据库设计：MySQL表设计与关系\n✅ API开发：RESTful接口设计\n✅ 工具使用：DataGrip数据库管理\n面试亮点： \u0026ldquo;独立完成从数据库设计到前后端开发的全流程\u0026rdquo; \u0026ldquo;掌握Vue + Node.js + MySQL技术栈整合\u0026rdquo; \u0026ldquo;具备多端开发能力（Web + 小程序）\u0026rdquo; \u0026ldquo;使用DataGrip进行专业的数据库管理\u0026rdquo; 下一步建议： 功能扩展：添加用户登录、支付功能 性能优化：添加缓存、分页查询 部署上线：购买云服务器部署项目 持续学习：学习TypeScript、Docker等进阶技术 ","date":"2025-10-20T16:36:32+08:00","permalink":"https://ye-guan-xing.github.io/p/%E5%85%A8%E5%9F%9F%E7%94%9F%E6%B4%BB%E6%9C%8D%E5%8A%A1%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/","title":"全域生活服务平台开发流程详解"},{"content":"大一新生IT学习路线指南 亲爱的大一新生，刚踏入大学，面对丰富多彩的IT领域或许会有些迷茫，这里学长给一些路径建议：\n算法竞赛 -算法竞赛1970年代起步，1990-2000年代兴盛，21世纪后趋稳定,其中ACM-ICPC为计算机竞赛含金量之最，获奖者多能获得计算机大厂offer。\n链接：算法竞赛 PS(如果有天赋，有恒心，有毅力，在经过测验后(或Codeforces1200分以上)，可以找我们参加明年的HBCPC). 白名单竞赛推荐 竞赛名称 官网链接 ACM-ICPC国际大学生程序设计竞赛 https://icpc.global/ 中国大学生程序设计竞赛（CCPC） https://ccpc.io/ 中国高校计算机大赛（天梯赛） http://www.c4best.cn/ 蓝桥杯全国软件和信息技术专业人才大赛 http://dasai.lanqiao.cn/ 百度之星程序设计大赛 https://star.baidu.com/#/ 码蹄杯全国职业院校程序设计大赛 https://matiji.net/matibei 睿抗机器人开发者大赛(RAICOM) https://www.robocom.com.cn/ 人工智能方向 在50-60年代兴起，人们一直在努力，于2012引爆深度学习，在之后，CharGPT和Deepseek、GPT3等模型，被用于各种领域，如图像识别、语音识别、文本生成、代码生成、翻译等，到现在已成为最热门的方向，其就业岗位，薪资高、门槛高\u0026ndash;多在研究生为主 机器学习 学习路线链接：机器学习 简介：机器学习是人工智能的核心，通过算法让计算机从数据中“学习规律”。你将学习决策树、支持向量机等各类机器学习算法，并用它们解决分类、回归、聚类等实际问题。 深度学习 学习路线链接：深度学习 简介：深度学习是机器学习的“进阶版”，通过神经网络模拟人脑学习。你将学习CNN（卷积神经网络）、RNN（循环神经网络）等网络结构，应用于图像识别、语音识别、自然语言处理等复杂场景。 自然语言处理（NLP） 学习路线链接：自然语言处理NLP 简介：NLP让计算机“理解人类语言”。学习后你可以掌握分词、语义分析、情感识别等技术，开发聊天机器人、智能问答、机器翻译等应用。 计算机视觉（CV）工程师 学习路线链接：计算机视觉cv工程师 简介：CV让计算机“看见并理解世界”。你将学习图像处理、目标检测、图像识别等技术，应用于自动驾驶、人脸识别、工业质检等领域。 前端开发 路线图链接：前端开发的路线图 简介：前端开发聚焦于网页的“视觉与交互”，从精美界面到灵动交互效果都由前端工程师打造。就业市场上，前端开发起步于2000年后（HTML/CSS普及、早期JavaScript简单应用落地），2015年后随React/Vue/Angular等框架爆发进入鼎盛期（企业对复杂交互、单页应用需求激增），2020年后需求趋于稳定（框架生态成熟，侧重工程化、跨端适配与性能优化）。跟着这份路线图，你可以系统学习HTML、CSS、JavaScript及各类前端框架，成长为能设计并实现炫酷网页的前端开发者。 Java后端开发 简介：Java后端开发是支撑企业业务逻辑的“核心骨架”，负责搭建服务器、处理数据交互与业务逻辑实现。就业市场上，Java后端起步于2000年左右（Java EE推出，企业级应用逐步采用），2010-2020年随微服务兴起、Spring生态成熟进入鼎盛期（成为各行业后端开发标配，需求爆发式增长），2020年后进入稳定期（需求保持高位稳定，侧重高并发、云原生适配与系统安全性）。学习这条路线，你会掌握Java核心语法、框架应用与服务器部署等知识，成长为能搭建稳定、高效企业后端系统的开发工程师。 数据分析 学习路线链接：数据分析学习路线 简介：数据分析是从海量数据中挖掘价值的“金矿挖掘术”。就业市场上，数据分析岗位起步于2010年左右（数据量激增，企业需专职人员提炼数据价值），2018-2023年随大数据技术成熟进入鼎盛期（各行业重视数据驱动，需求爆发），2023年后进入稳定期（需求平稳，侧重业务理解、数据建模与可视化深度）。通过这条路线，你将掌握Python、SQL等数据处理工具，以及数据分析方法和可视化技术，成为能从数据中发现规律、辅助业务决策的分析师。 移动开发 安卓开发 学习路线链接：安卓开发路线 简介：安卓开发专注于安卓手机应用的开发。就业市场上，安卓开发起步于2008年（安卓系统发布后，早期手机APP开发需求出现），2012-2018年随智能手机普及进入鼎盛期（社交、工具、电商类APP爆发，岗位需求旺盛），2018年后进入稳定期（需求趋于平稳，侧重跨端适配、性能优化与鸿蒙生态兼容）。学习后你可以掌握安卓开发框架、UI设计、性能优化等知识，打造各类安卓应用（如社交APP、工具类APP）。 鸿蒙开发 学习路线链接：鸿蒙开发路线 简介：鸿蒙是面向全场景的分布式操作系统，学习鸿蒙开发可以让你掌握其开发框架和生态，开发跨手机、平板、智能手表等设备的应用。就业市场上，鸿蒙开发起步于2020年（鸿蒙OS 2.0发布，生态逐步搭建），当前处于快速发展期（企业加速布局鸿蒙应用，需求逐步增长，尚未进入鼎盛），未来随生态完善（设备覆盖扩大、开发工具成熟）将进入稳定期，具备鸿蒙开发能力的人才在物联网、智能设备领域竞争力突出。 ","date":"2025-10-18T23:02:45+08:00","permalink":"https://ye-guan-xing.github.io/p/%E5%A4%A7%E4%B8%80%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84%E8%BD%AF%E4%BB%B6%E7%AF%87/","title":"大一的学习路径（软件篇）"}]